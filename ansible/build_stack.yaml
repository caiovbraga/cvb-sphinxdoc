---
  - name: Copy files to remote host and build docker compose stack
    hosts: ["digitalocean"]
    gather_facts: yes
    become: true
    vars:
      stack_name: sphinxdoc
      stack_dir: /srv/sphinxdoc
      docker_group: docker
      domain_name: guestroomgenie.com
      copy_to_remote_host: ["ansible", "sphinx"]
      docker_image_name:
        - { dir: "sphinx", name: "cvb-sphinxdoc" }
        
    tasks:
      - debug: var=stack_dir
      # - name: Install aptitude using apt
      #   apt: name=aptitude state=latest update_cache=yes force_apt_get=yes

      # - name: Install required system packages
      #   apt: name={{ item }} state=latest update_cache=yes
      #   loop: [ 'apt-transport-https', 'ca-certificates', 'curl', 'software-properties-common', 'python3-pip', 'virtualenv', 'python3-setuptools']

      # - name: Add Docker GPG apt Key
      #   apt_key:
      #     url: https://download.docker.com/linux/ubuntu/gpg
      #     state: present

      # - name: Add Docker Repository
      #   apt_repository:
      #     repo: deb https://download.docker.com/linux/ubuntu xenial stable
      #     state: present

      # - name: Update apt and install docker-ce
      #   apt: update_cache=yes name=docker-ce state=latest    

      # - name: Install Docker Module for Python
      #   pip:
      #     name: [ "docker", "docker-compose" ]
  
      - name: Create a directory for stack
        file:
          path: "{{ stack_dir }}"
          state: directory
          owner: "{{ ansible_user }}"
          group: "{{ docker_group }}"
          mode: '0755'
  
      - name: Synchronize and delete files in target host
        synchronize:
          src: "../{{ item }}"
          dest: "{{ stack_dir}}"
          owner: yes
          group: yes
          delete: yes
          recursive: yes
          rsync_opts:
            - "--exclude=build"
        with_items: "{{ copy_to_remote_host }}"

      - name: Change Ownershop
        file:
          path: "{{ stack_dir }}"
          state: directory
          owner: "{{ ansible_user }}"
          group: "{{ docker_group }}"
          recurse: yes

      - name: Copy docker-compose.yaml to remote host
        template:
          src: "./docker-compose.yaml.j2"
          dest: "{{ stack_dir }}/docker-compose.yaml"
          owner: "{{ ansible_user }}"
          group: "{{ docker_group }}"      
  
      - name: Build images
        docker_image:
          build:
            path: "{{ stack_dir }}/{{ item.dir}}"
            pull: yes
          name: "{{ item.name }}"
          source: build
          state: present
          force_source: yes
        with_items: "{{ docker_image_name }}"
        
      - name: Create and start services
        docker_compose:
          project_name: "{{ stack_name }}"
          project_src: "{{ stack_dir }}"
          recreate: always
        register: output
        
      - debug: var=output  